// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: helloworld/helloworld.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Greeting_CustomerClient is the client API for Greeting_Customer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Greeting_CustomerClient interface {
	AddCustomer(ctx context.Context, in *AddCustomerDetails, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetCustomer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Customerlist, error)
}

type greeting_CustomerClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeting_CustomerClient(cc grpc.ClientConnInterface) Greeting_CustomerClient {
	return &greeting_CustomerClient{cc}
}

func (c *greeting_CustomerClient) AddCustomer(ctx context.Context, in *AddCustomerDetails, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, "/Greeting_Customer/AddCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeting_CustomerClient) GetCustomer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Customerlist, error) {
	out := new(Customerlist)
	err := c.cc.Invoke(ctx, "/Greeting_Customer/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Greeting_CustomerServer is the server API for Greeting_Customer service.
// All implementations must embed UnimplementedGreeting_CustomerServer
// for forward compatibility
type Greeting_CustomerServer interface {
	AddCustomer(context.Context, *AddCustomerDetails) (*CustomerResponse, error)
	GetCustomer(context.Context, *Empty) (*Customerlist, error)
	mustEmbedUnimplementedGreeting_CustomerServer()
}

// UnimplementedGreeting_CustomerServer must be embedded to have forward compatible implementations.
type UnimplementedGreeting_CustomerServer struct {
}

func (UnimplementedGreeting_CustomerServer) AddCustomer(context.Context, *AddCustomerDetails) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomer not implemented")
}
func (UnimplementedGreeting_CustomerServer) GetCustomer(context.Context, *Empty) (*Customerlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedGreeting_CustomerServer) mustEmbedUnimplementedGreeting_CustomerServer() {}

// UnsafeGreeting_CustomerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Greeting_CustomerServer will
// result in compilation errors.
type UnsafeGreeting_CustomerServer interface {
	mustEmbedUnimplementedGreeting_CustomerServer()
}

func RegisterGreeting_CustomerServer(s grpc.ServiceRegistrar, srv Greeting_CustomerServer) {
	s.RegisterService(&Greeting_Customer_ServiceDesc, srv)
}

func _Greeting_Customer_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCustomerDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Greeting_CustomerServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeting_Customer/AddCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Greeting_CustomerServer).AddCustomer(ctx, req.(*AddCustomerDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeting_Customer_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Greeting_CustomerServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Greeting_Customer/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Greeting_CustomerServer).GetCustomer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeting_Customer_ServiceDesc is the grpc.ServiceDesc for Greeting_Customer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeting_Customer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Greeting_Customer",
	HandlerType: (*Greeting_CustomerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCustomer",
			Handler:    _Greeting_Customer_AddCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _Greeting_Customer_GetCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
